generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  user_id       String   @id @default(uuid())
  email         String   @unique
  name          String
  lastname      String
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  emailVerified Boolean
  active        Boolean  @default(true)
  avatarUrl     String?
  moviesHistory WatchHistory[]
  movies        Movie[]
}

model EmailVerification {
  id               Int      @id @default(autoincrement())
  email            String
  verificationCode Int
  createdAt        DateTime @default(now())
  expiresAt        DateTime @default(dbgenerated("(now() + interval 10 minute)"))
}

model Genre {
  genre_id String  @id @default(uuid())
  name     String
  movies   Movie[]
}

model Director {
  director_id String  @id @default(uuid())
  name        String
  movie_id  String
  movie     Movie   @relation(fields: [movie_id], references: [movie_id])
  @@index([movie_id])
}

model Writer {
  writer_id String  @id @default(uuid())
  name      String
  movie_id  String
  movie     Movie   @relation(fields: [movie_id], references: [movie_id])
  @@index([movie_id])
}

model Actor {
  actor_id String  @id @default(uuid())
  name     String
  movie_id String
  movie    Movie   @relation(fields: [movie_id], references: [movie_id])
  @@index([movie_id])
}

model WatchHistory {
  user User @relation(fields:[user_id], references: [user_id])
  user_id String
  movie Movie @relation(fields:[movie_id], references: [movie_id])
  movie_id String
  viewingTime Float
  updatedAt      DateTime   @updatedAt

  @@id([user_id, movie_id])
  @@index([user_id])
  @@index([movie_id])
}

model Movie {
  movie_id       String     @id @default(uuid())
  user_id_date   String     @unique
  thumbnailUrl   String?
  imageUrl       String
  date           String
  title          String
  productionYear Int
  duration       Float      
  movieUrl       String?    
  synopsis       String     @db.Text
  user_id        String
  enabled        Boolean
  explicitContent Boolean
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  directors      Director[]
  writers        Writer[]
  cast           Actor[]
  genres         Genre[]
  users          WatchHistory[]
  user           User       @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}


model Token {
  token_id String @id @default(uuid())
  user_id String @unique
  email String @unique
  token String
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("(now() + interval 60 minute)"))
}